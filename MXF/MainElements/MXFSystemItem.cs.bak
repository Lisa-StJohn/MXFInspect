
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Myriadbits.MXFInspect
{
	[Flags]
	public enum SystemBitmap
	{
		Control = 0x01,
		Data = 0x02,
		Sound = 0x04,
		Picture = 0x08,
		UserDateTime = 0x10,
		CreationDateTime = 0x20,
		SMPTELabel = 0x40,
		FECActive = 0x80
	};

	public enum SystemStreamStatus
	{
		Undefined = 0,
		HeadPackage = 1,
		StartStreamPackage = 2,
		MidStreamPackage = 3,
		EndStreamPackage = 4,
		StreamTailPackage = 5,
		StreamStartEndPackage = 6,
		Reserved = 7
	};

	public enum SystemTransferMode
	{
		Synchronous = 0,
		Isochronous = 1,
		Asynchronous = 2,
		LowLatency = 3,
	};

	public enum SystemTimingMode
	{
		Normal = 0,
		Advanced = 1,
		Dual = 2,
		Reserved = 3,
	};

	public class MXFSystemItem : MXFKLV
	{
		[CategoryAttribute("SystemItem"), ReadOnly(true)]
		public SystemBitmap SystemBitmap { get; set; }
		[CategoryAttribute("SystemItem"), ReadOnly(true)]
		public double PackageRate { get; set; }
		[CategoryAttribute("SystemItem"), ReadOnly(true)]
		public SystemStreamStatus StreamStatus { get; set; }
		[CategoryAttribute("SystemItem"), ReadOnly(true)]
		public bool LowLatencyMode { get; set; }
		[CategoryAttribute("SystemItem"), ReadOnly(true)]
		public SystemTransferMode TransferMode { get; set; }
		[CategoryAttribute("SystemItem"), ReadOnly(true)]
		public SystemTimingMode TimingMode { get; set; }
		[CategoryAttribute("SystemItem"), ReadOnly(true)]
		public UInt16 ChannelHandle { get; set; }
		[CategoryAttribute("SystemItem"), ReadOnly(true)]
		public UInt16 ContinuityCount { get; set; }

		[CategoryAttribute("SystemItem"), ReadOnly(true), TypeConverter(typeof(ExpandableObjectConverter))]
		public MXFRefKey SMPTEUL { get; set; }

		[CategoryAttribute("SystemItem"), ReadOnly(true)]
		public string CreationDate { get; set; }
		[CategoryAttribute("SystemItem"), ReadOnly(true)]
		public string UserDate { get; set; }
		[CategoryAttribute("SystemItem"), ReadOnly(true)]
		public string UserDateFullFrameNb { get; set; }


		[CategoryAttribute("SystemItem"), ReadOnly(true)]
		public long EssenceOffset
		{
			get
			{
				if (this.Partition == null) return this.Offset; // Unknown
				if (this.Partition.FirstSystemItem == null) return this.Offset; // Unknown
				return (this.Offset - this.Partition.FirstSystemItem.Offset) + ((long)this.Partition.BodyOffset);
			}
		}

		public MXFSystemItem(MXFReader reader, MXFKLV headerKLV)
			: base(headerKLV, "SystemItem", KeyType.SystemItem)
		{
			reader.Seek(this.DataOffset); // Seek to the start of the data

			// Parse system bitmap
			this.SystemBitmap = (SystemBitmap)reader.ReadB();

			// Parse Content package rate
			byte rate = reader.ReadB();
			int rateIndex = (rate & 0x1E) >> 1;
			int[] rates = new int[16] {0, 24, 25, 30, 48, 50, 60, 72, 75, 90, 96, 100, 120, 0, 0, 0 };
			int rateNonDrop = 1;
			if (rateIndex < 16)
				rateNonDrop = rates[rateIndex];
			this.PackageRate = rateNonDrop;
			if ((rate & 0x01) == 0x01) // 1.001 divider active?
				this.PackageRate = this.PackageRate / 1.001;


			// Parse Content Package Type
			byte type = reader.ReadB();
			this.StreamStatus = (SystemStreamStatus)((type & 0xE0) >> 5);
			this.LowLatencyMode = ((type & 0x10) == 0x10);
			this.TransferMode = (SystemTransferMode)((type & 0x0C) >> 2);
			this.TimingMode = (SystemTimingMode)(type & 0x03);

			this.ChannelHandle = reader.ReadW();
			this.ContinuityCount = reader.ReadW();

			this.SMPTEUL = new MXFRefKey(reader, 16, "SMPTEUL"); // Always read even if zero

			MXFTimeStamp creationTimeStamp = reader.ReadBCDTimeCode(rateNonDrop);
			this.CreationDate = creationTimeStamp.ToString();

			MXFTimeStamp timeStamp = reader.ReadBCDTimeCode(rateNonDrop);
			this.UserDate = timeStamp.ToString();
			this.UserDateFullFrameNb = timeStamp.GetString(true);
		}


	

		

	}
}
